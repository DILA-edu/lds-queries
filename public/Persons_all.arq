#QueryScope=Person
#QueryReturnType=Table
#QueryResults=A table containing the Id, names, events, student, teachers, and notes for all Persons
#QueryUrl=/Persons_all

#output.?RID.type=URI
#output.?RID.desc=Person URI
#output.?prefNm.type=string
#output.?prefNm.desc=preferred name
#output.?nmType.type=URI
#output.?nmType.desc=name type
#output.?nameStr.type=string
#output.?nameStr.desc=name type
#output.?student.type=URI
#output.?student.desc=student
#output.?teacher.type=URI
#output.?teacher.desc=teacher
#output.?eventType.type=URI
#output.?eventType.desc=event type
#output.?notBefore.type=int
#output.?notBefore.desc=not before
#output.?notAfter.type=int
#output.?notAfter.desc=not after
#output.?onYear.type=int
#output.?onYear.desc=on year
#output.?eventPlace.type=URI
#output.?eventPlace.desc=event place
#output.?noteText.type=string
#output.?noteText.desc=note text
#output.?noteWork.type=URI
#output.?noteWork.desc=note work
#output.?noteLocation.type=string
#output.?noteLocation.desc=note location statement

select ?RID ?prefNm ?nmType ?nameStr ?student ?teacher ?eventType ?notBefore ?notAfter ?onYear ?eventPlace ?noteText ?noteWork ?noteLocation
where {
  ?RID a :Person .
  { ?RID skos:prefLabel ?prefNm . }
  union
  { ?RID :personName ?bnm .
    ?bnm rdf:type ?nmType .
    ?bnm rdfs:label ?nameStr . }
  union
  { ?RID :personTeacherOf ?student . }
  union
  { ?RID :personStudentOf ?teacher . }
  union
  { ?RID  :personEvent ?ev . 
    ?ev rdf:type ?eventType . 
    optional { ?ev :notBefore ?notBefore . }
    optional { ?ev :notAfter ?notAfter . }
    optional { ?ev :onYear ?onYear . }
    optional { ?ev :eventWhere ?eventPlace . } }
  union
  { ?RID  :note ?nt .
    optional { ?nt :noteText ?noteText . }
    optional { ?nt :noteWork ?ntWrk . }
    optional { ?nt :noteLocationStatement ?noteLocation . } }
} order by ?RID